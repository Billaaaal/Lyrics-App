@file:Suppress("CanBeVal")

package com.example.my_app

import android.os.Build
import android.os.Bundle
import android.text.Editable
//import android.text.TextWatcher
import android.util.Log
import android.view.View
import android.widget.*
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AppCompatActivity
import androidx.core.os.postDelayed
import androidx.core.widget.doAfterTextChanged
import com.chaquo.python.PyObject
import com.chaquo.python.Python
import com.chaquo.python.android.AndroidPlatform
import com.google.android.material.textfield.TextInputEditText
import com.squareup.picasso.Picasso
import java.util.*
import kotlin.collections.ArrayList
import kotlin.concurrent.schedule

//import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers
//import io.reactivex.rxjava3.subjects.PublishSubject
//import kotlinx.coroutines.Dispatchers
//import kotlinx.coroutines.flow.*
//import java.util.*
//import java.util.concurrent.TimeUnit
//import kotlin.concurrent.schedule


class MainActivity : AppCompatActivity() {
    @RequiresApi(Build.VERSION_CODES.Q)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        supportActionBar?.hide()
        initPython()

        val imageview = findViewById<ImageView>(R.id.thumbnail)
        val textViewLyrics = findViewById<TextView>(R.id.textViewlyrics)
        val textViewTitle = findViewById<TextView>(R.id.textViewTitle)
        val searchBar = findViewById<AutoCompleteTextView>(R.id.Search_bar)


        var suggestions = ArrayList<String>()
        var arrayAdapter = ArrayAdapter<String>(this@MainActivity, android.R.layout.select_dialog_item, suggestions)
        searchBar.setAdapter(arrayAdapter)
        var timer = Timer()
        var length = 0

        var counter = 0

        searchBar.debounce(500L) { text->
            if (text.toString().length==0){
                Toast.makeText(this@MainActivity, "Empty !", Toast.LENGTH_SHORT).show()

            } else{
                Toast.makeText(this@MainActivity, text.toString(), Toast.LENGTH_SHORT).show()

            }




        }


        searchBar.setOnItemClickListener { parent, view, position, id ->
            val selectedItem = parent.getItemAtPosition(position).toString()
            searchBar.clearFocus()
            //val requestReturned = getRequest(selectedItem)

            var requestReturned = getRequest(selectedItem.toString())
            //val end = System.nanoTime()
            if (requestReturned.joinToString("")=="Erreur"){

            }
            else {

                val lyrics = requestReturned[0].toString()
                val songName = requestReturned[1].toString()
                val singer = requestReturned[2].toString()
                var cover = requestReturned[3].toString()
                val infos = "${songName} By ${singer}"
                Picasso.get().load(cover).into(imageview)
                textViewLyrics.text = lyrics //TextViewLyrics.text = requestReturned.toString()
                textViewTitle.text = infos//TextViewLyrics.text = requestReturned.toString()
            }
        }


    }

    private fun initPython(){
        if (!Python.isStarted()){
            Python.start(AndroidPlatform(this))

        }

    }

    private fun getRequest(userInput: String): MutableList<PyObject> {
        val python = Python.getInstance()
        val pythonFile = python.getModule("request_to_do")
        return pythonFile.callAttr("main_request", userInput).asList() //return pythonFile.callAttr("main_request", userInput).toString()




    }

    private fun getRequestAutoComplete(autoCompleteInput: String): MutableList<PyObject> {
        val python = Python.getInstance()
        val pythonFile = python.getModule("request_to_do")
        return pythonFile.callAttr("auto_complete", autoCompleteInput).asList() //return pythonFile.callAttr("main_request", userInput).toString()




    }

    fun EditText.debounce(delay: Long, action: (Editable?) -> Unit) {
        doAfterTextChanged { text ->
            var counter = getTag(id) as? Int ?: 0
            handler.removeCallbacksAndMessages(counter)
            handler.postDelayed(delay, ++counter) { action(text) }
            setTag(id, counter)
        }
    }
}
